---
import Menu from "@icons/Menu.astro";
import type { HeaderProps } from "@types";

type Props = HeaderProps;

const { navLinks } = Astro.props;
---

<header
  class="sticky top-0 z-50 mx-auto flex max-w-5xl animate-slide-in justify-between bg-black px-5 py-6"
>
  <button
    id="theme-toggle"
    class="theme-toggle"
    aria-label="Toggle theme"
    type="button"
  >
    <svg id="sun-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
    </svg>
    <svg id="moon-icon" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
    </svg>
  </button>

  <button
    type="button"
    id="menu-button"
    class="px-1.5 text-neutral sm:hidden"
    aria-expanded="false"
    aria-controls="main-menu"
  >
    <Menu />
  </button>

  <nav
    class="absolute top-20 right-5 hidden rounded-xl border border-neutral/40 bg-black px-4 py-5 text-neutral sm:static sm:block sm:border-0 sm:bg-transparent sm:p-0"
    id="main-menu"
  >
    <ul class="gap-2 sm:flex">
      {
        navLinks.map((link) => (
          <li class="relative">
            <a
              class={`nav-item relative block p-2 text-sm font-medium transition-all duration-500 after:absolute after:bottom-0 after:left-2/4 after:h-2 after:w-1 after:-translate-x-2/4 after:text-primary after:opacity-0 after:content-['•'] hover:text-white`}
              href={link.href}
            >
              {link.text}
            </a>
          </li>
        ))
      }
      <li class="relative">
        <button
          id="lang-switch"
          class="lang-switch nav-item relative block p-2 text-sm font-medium transition-all duration-500 hover:text-white rounded-md"
          aria-label="Switch language"
        >
          العربية
        </button>
      </li>
    </ul>
  </nav>
</header>

<script>
  import { languageStore } from "@app/language-store";
  import { themeStore } from "@app/theme-store";
  
  // Toggle mobile menu
  const button = document.querySelector("#menu-button");
  const menu = document.querySelector("#main-menu");
  const navItems = document.querySelectorAll("#main-menu > ul > li > a");
  const langButton = document.querySelector("#lang-switch") as HTMLButtonElement;
  const themeButton = document.querySelector("#theme-toggle") as HTMLButtonElement;
  const sunIcon = document.querySelector("#sun-icon");
  const moonIcon = document.querySelector("#moon-icon");

  const toggleMenu = () => {
    menu?.classList.toggle("hidden");
    const isHidden = menu?.classList.contains("hidden");
    button?.setAttribute("aria-expanded", `${!isHidden}`);
  };

  const updateUI = () => {
    const content = languageStore.content;
    
    // Update navigation links
    navItems.forEach((item) => {
      const href = item.getAttribute("href");
      if (href === "#projects") {
        item.textContent = content.nav.projects;
      } else if (href === "#about") {
        item.textContent = content.nav.about;
      }
    });
    
    // Update language switch button
    if (langButton) {
      langButton.textContent = content.ui.switchLang;
    }
    
    // Update page content
    const event = new CustomEvent('language-change', { detail: content });
    window.dispatchEvent(event);
  };

  const updateThemeUI = () => {
    if (themeStore.isDark) {
      sunIcon?.classList.add('hidden');
      moonIcon?.classList.remove('hidden');
    } else {
      sunIcon?.classList.remove('hidden');
      moonIcon?.classList.add('hidden');
    }
  };

  // Theme switching
  themeButton?.addEventListener("click", () => {
    themeStore.toggleTheme();
    updateThemeUI();
  });

  // Language switching
  langButton?.addEventListener("click", () => {
    languageStore.toggleLanguage();
    updateUI();
  });

  button?.addEventListener("click", toggleMenu);
  navItems.forEach((item) => {
    item?.addEventListener("click", toggleMenu);
  });

  // Initialize UI
  updateUI();
  updateThemeUI();

  // Update navigation based on scroll position with Intersection Observer
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("href") === `#${entry.target.id}`) {
              item.classList.add("text-white", "md:after:opacity-100");
            } else {
              item.classList.remove("text-white", "md:after:opacity-100");
            }
          });
        }
      });
    },
    { threshold: 0.5 },
  );

  document.querySelectorAll("section").forEach((section) => {
    observer.observe(section);
  });

  // Cleanup observer
  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      document.querySelectorAll("section").forEach((section) => {
        observer.observe(section);
      });
    }
  };
</script>

<style>
  header {
    animation-timeline: scroll();
    animation-range: 0 650px;
  }
</style>
